##Support Pies for individual programs
support<-ActivePayments%>%
group_by(Program,SupportType) %>%
summarise(Amount=sum(SplitPaymentAmount))
support$Support<-support$SupportType
for (i in unique(support$Program)){
q<-support[support$Program==i,]
df <- q %>%
mutate(end = 2 * pi * (cumsum(Amount)/sum(Amount)),
percent=percent(Amount/sum(Amount),digits=0),
start = lag(end, default = 0),
middle = 0.5 * (start + end),
hjust = ifelse(middle > pi, 1, 0),
vjust = ifelse(middle < pi/2 | middle > 3 * pi/2, 0, 1))
assign(paste(i,"Pie",sep=''),ggplot(df) +
geom_arc_bar(aes(x0 = 0, y0 = 0, r0 = 0, r = 1,
start = start, end = end, fill = Support), color="white", lwd=.35) +
geom_label_repel(aes(x = 1.05 * sin(middle), y = 1.05 * cos(middle), label = percent),
size=5.75, color = 'white', family='Montserrat',fill=rgb(0,0,0,.8),
box.padding = 0.25, point.padding = 0,
label.padding = .25,
label.size =NA) +
coord_fixed() +
scale_x_continuous(limits = c(-1.5, 1.5), name = "", breaks = NULL, labels = NULL) +
scale_y_continuous(limits = c(-1.5, 1.5), name = "", breaks = NULL, labels = NULL)+pietheme +
# remove black diagonal line from legend
guides(fill=guide_legend(override.aes=list(colour=NA)))+
scale_fill_manual(values=(c("#ffa600","#3a435c", "#6c8cc7", "#deebf7", "#ffa600")))
)
}
##Core Funding Strategies
programstrategypayments<-ActivePayments%>%
filter(!is.na(CoreFundingStrategy)&CoreFundingStrategy!="DISP - NA")
totalwpf<-sum(programstrategypayments$SplitPaymentAmount)
programstrategies<-programstrategypayments%>%
group_by(Program,CoreFundingStrategy)%>%
summarize(Amount=sum(SplitPaymentAmount))%>%
mutate(label=paste("$",format(round(Amount / 1e6, 1), trim = TRUE), "M", sep=''))
q<-programstrategypayments%>%
group_by(CoreFundingStrategy) %>%
summarise(Amount=sum(SplitPaymentAmount),PercentageBudget=sum(SplitPaymentAmount)/totalwpf)
q$Program<-"WPF Total"
q$Program<-as.factor(q$Program)
q$Percentlabel<-percent(q$PercentageBudget, digits = 0)
q$CoreFundingStrategy<-fct_reorder(q$CoreFundingStrategy,q$Amount,.desc=TRUE)
q<-q[q$CoreFundingStrategy!="NA",]
cfstotal<-programstrategypayments%>%
group_by(CoreFundingStrategy)%>%
summarize(Amount=sum(SplitPaymentAmount)) %>%
arrange(desc(Amount))
programtotal<-programstrategypayments%>%
group_by(Program)%>%
summarize(Amount=sum(SplitPaymentAmount)) %>%
arrange(desc(Amount))
r<-programstrategypayments %>%
group_by(CoreFundingStrategy,Program) %>%
summarise(Amount=sum(SplitPaymentAmount)) %>%
left_join(cfstotal,by=c("CoreFundingStrategy"="CoreFundingStrategy")) %>%
left_join(programtotal,by=c("Program"="Program")) %>%
arrange(desc(Amount)) %>%
mutate(PercentageBudget=Amount.x/Amount)%>%
mutate(Percentlabel=percent(PercentageBudget, digits = 0))
r$CoreFundingStrategy<-fct_reorder(r$CoreFundingStrategy,r$Amount,.desc=TRUE)
r<-r[r$CoreFundingStrategy!="NA",]
for (i in unique(r$Program)){
s<-r[r$Program==i,]
s$Program<-as.factor(s$Program)
s<-bind_rows(q,s)
s$Program<-as.factor(s$Program)
s$Program<-fct_relevel(s$Program,"WPF Total",after=Inf)
assign(paste(i,"HeatStrat",sep=''),ggplot(data = s, aes( y=Program,x=CoreFundingStrategy, fill=PercentageBudget)) +
geom_tile()+
geom_text(aes(label=Percentlabel), color="#000000", family="Montserrat",size=3.25)+
scale_fill_distiller(palette = "YlGnBu", limits=c(0,.7),direction = 1,breaks=c(0,.2,.4,.6),labels=c("0%","20%","40%","60%"))+heattheme2+
guides(fill=guide_colorbar(barheight = 3.5, barwidth = .75))+
labs(fill="% of Total"))
}
##Geography
programgrouped<-ActivePayments%>%
group_by(Geography_Description, Program,A) %>%
summarize(Amount=sum(SplitPaymentAmount))
##Remove generals
programgrouped<-programgrouped[programgrouped$Geography_Description!="International General",]
programgrouped<-programgrouped[programgrouped$Geography_Description!="Africa General",]
programgrouped<-programgrouped[programgrouped$Geography_Description!="Latin America General",]
programgrouped<-programgrouped[programgrouped$Geography_Description!="Europe General",]
programgrouped<-programgrouped[programgrouped$Geography_Description!="Middle East General",]
programgrouped<-programgrouped[programgrouped$Geography_Description!="Asia General",]
programgrouped<-programgrouped[programgrouped$Geography_Description!="Eastern Europe General",]
programgrouped<-programgrouped[programgrouped$Geography_Description!="Southeast General",]
programgrouped<-programgrouped[programgrouped$Geography_Description!="Australia & Pacific",]
programgrouped<-programgrouped[programgrouped$Geography_Description!="SoCal",]
programgrouped<-programgrouped[programgrouped$Geography_Description!="Caribbean General",]
programgrouped$Geography_Description[programgrouped$Geography_Description=="D.R. of Congo"]<-"Democratic Republic of the Congo"
programgrouped$Geography_Description[programgrouped$Geography_Description=="Burma"]<-"Myanmar"
programgrouped$Geography_Description[programgrouped$A=="USA Domestic"]<-"USA"
programgrouped$label<-paste(programgrouped$Geography_Description," - ",currency(programgrouped$Amount, digits = 0L),sep='')
programgrouped<-programgrouped %>%
group_by(Geography_Description, Program) %>%
summarize(Amount=sum(Amount))
##Make Map
world <- map_data("world") %>% filter(region!="Antarctica")
world<-fortify(world)
map_data_fortified <- fortify(world)
mround <- function(x,base){
base*round(x/base)
}
for (i in unique(programgrouped$Program)){
dat<-programgrouped[programgrouped$Program==i,]
minVal <- min(dat$Amount, na.rm = T)
maxVal <- mround(max(dat$Amount+500000, na.rm = T),1000000)
# now we join the thematic data
mapdata <- map_data_fortified %>% left_join(dat, by = c("region" = "Geography_Description"))
labs<-mapdata%>%
group_by(region)%>%
summarise(lat=mean(lat),lon=mean(long))
labs<-dat %>% left_join(labs, by= c("Geography_Description"="region"))
assign(paste(i,"WorldMap",sep=''),ggplot() +
geom_polygon(data = mapdata, aes(x=long, y = lat,fill=Amount, group = group),  color="#A9A9A9", size=0.1) +
scale_fill_distiller(palette =  "OrRd", direction = 1,limits=c(0,maxVal+250000), na.value = "#A9A9A9", name = "",breaks=c(0,maxVal/4,maxVal/2,3*maxVal/4,maxVal),
labels=c("0",paste("$",format(round((maxVal/4) / 1e6, 2), trim = TRUE),"M"),
paste("$",format(round((maxVal/2) / 1e6, 2), trim = TRUE),"M"),
paste("$",format(round((3*maxVal/4) / 1e6, 2), trim = TRUE),"M"),
paste("$",format(round(maxVal / 1e6, 2), trim = TRUE),"M")))+
coord_cartesian(xlim = c(-155, 155))+
ggtitle("") +
guides(fill=guide_colorbar(barheight = 5, barwidth = 1.25))+
theme_map()+
theme(
legend.position = c(0.15, 0.25),
text = element_text(color = "#000000",family="Montserrat"),
plot.background = element_blank(),
#  legend.position="bottom",
legend.text = element_text(size=10),
#legend.box = "vertical",
legend.box.margin =  margin(0,0,0,0),
legend.spacing.y = unit(0,'cm')
)
)
}
##For State Payments By Program
bystateprogram<-ActivePayments%>%
filter(A=="USA Domestic")%>%
filter(Geography_Description!="US General")%>%
group_by(Geography_Description,Program)%>%
summarize(Amount=sum(SplitPaymentAmount),OpenGrants=n_distinct(RequestId),Programs=paste(unique(Program),collapse=', '))%>%
left_join(USGeoLookupTable)%>%
mutate(StateAmount=Amount*StateAllocation)%>%
group_by(State,Program)%>%
summarize(StateAmount=sum(StateAmount))
##Map totals
sum(bystateprogram$Amount)
sum(bystateprogram$StateAmount)
sum(bystateprogram$Amount[bystateprogram$Geography_Description=="US General"])
sum(bystateprogram$Amount[bystateprogram$Geography_Description!="US General"])
for (i in unique(bystateprogram$Program)){
dat<-bystateprogram[bystateprogram$Program==i,]
spatial_data <- left_join(get_urbn_map(map = "states", sf = TRUE),
dat,
by = c("state_name"="State"))
minVal <- min(dat$StateAmount, na.rm = T)
maxVal <- mround(max(dat$StateAmount+500000, na.rm = T),1000000)
assign(paste(i,"StateMap",sep=''),ggplot() +
geom_sf(spatial_data,
mapping = aes(fill = StateAmount),color="white", size=0.2)+
scale_fill_distiller(palette =  "OrRd", direction = 1, na.value = "#A9A9A9", name = "",limits=c(0,maxVal),
breaks=c(0,maxVal/4,maxVal/2,3*maxVal/4,maxVal),
labels=c("0",paste("$",format(round((maxVal/4) / 1e6, 2), trim = TRUE),"M"),
paste("$",format(round((maxVal/2) / 1e6, 2), trim = TRUE),"M"),
paste("$",format(round((3*maxVal/4) / 1e6, 2), trim = TRUE),"M"),
paste("$",format(round(maxVal / 1e6, 2), trim = TRUE),"M")))+
theme_map()+
guides(fill=guide_colorbar(barheight = 5, barwidth = 1.25))+
theme_map()+
theme(
legend.position = c(0.075, 0.35),
text = element_text(color = "#000000",family="Montserrat"),
plot.background = element_blank(),
#  legend.position="bottom",
legend.text = element_text(size=10),
legend.box = "vertical",
legend.box.margin =  margin(0,0,0,0),
legend.spacing.y = unit(0,'cm')
)
)
}
#themes<-ActivePayments%>%
# group_by(Program, Theme, ThemeJoin)%>%
#summarize(Amount=sum(SplitPaymentAmount))
ThisProgram<-"APR"
ThisProgramName<-"Atrocity Prevention & Response"
ProgramPayments<-ActivePayments%>%
filter(Program==ThisProgram)
TotalPayments<-n_distinct(ProgramPayments$PaymentId)
TotalGrants<-n_distinct(ProgramPayments$RequestId)
TotalOrgs<-n_distinct(ProgramPayments$Name)
TotalPaymentAmount<-sum(ProgramPayments$SplitPaymentAmount)
Mission<-ProgramMissions%>%
filter(Abbreviation==ThisProgram)
Geography<-ProgramPayments%>%
group_by(Geography_Description)%>%
summarize(Amount=sum(SplitPaymentAmount))%>%
arrange(desc(Amount))%>%
slice_head(n=8)%>%
dplyr::rename("Geography"=1)
Geography$Amount<-as.character(currency(Geography$Amount,digits=0))
IndCountry<-ProgramPayments%>%
filter(GeneralorCountry=="Individual Country"|GeneralorCountry=="Domestic")
IndPayments<-sum(IndCountry$SplitPaymentAmount)
Generals<-ProgramPayments%>%
filter(GeneralorCountry=="International General"|GeneralorCountry=="Region General")
GeneralPayments<-sum(Generals$SplitPaymentAmount)
ThisProgram<-"APR"
ThisProgramName<-"Atrocity Prevention & Response"
ProgramPayments<-ActivePayments%>%
filter(Program==ThisProgram)
TotalPayments<-n_distinct(ProgramPayments$PaymentId)
TotalGrants<-n_distinct(ProgramPayments$RequestId)
TotalOrgs<-n_distinct(ProgramPayments$Name)
TotalPaymentAmount<-sum(ProgramPayments$SplitPaymentAmount)
Mission<-ProgramMissions%>%
filter(Abbreviation==ThisProgram)
Geography<-ProgramPayments%>%
group_by(Geography_Description)%>%
summarize(Amount=sum(SplitPaymentAmount))%>%
arrange(desc(Amount))%>%
slice_head(n=8)%>%
dplyr::rename("Geography"=1)
Geography$Amount<-as.character(currency(Geography$Amount,digits=0))
IndCountry<-ProgramPayments%>%
filter(GeneralorCountry=="Individual Country"|GeneralorCountry=="Domestic")
IndPayments<-sum(IndCountry$SplitPaymentAmount)
Generals<-ProgramPayments%>%
filter(GeneralorCountry=="International General"|GeneralorCountry=="Region General")
GeneralPayments<-sum(Generals$SplitPaymentAmount)
ThemeSummary<-ProgramPayments%>%
group_by(Theme)%>%
summarize(`Amount`=sum(SplitPaymentAmount),
Grants=n_distinct(RequestId),
Organizations=n_distinct(Name))%>%
arrange(desc(Amount))
ThemeSummary$Amount<-formattable::currency(ThemeSummary$Amount,digits=0)
kableExtra::kable(ThemeSummary, booktabs = T) %>%
kableExtra::kable_styling(latex_options = "striped", position = "left")
create_section <- function(i) {
# Inserts "## Title (auto)"
pander::pandoc.header(i, level = 4)
# Section contents
# e.g. a random plot
pander::pandoc.p(ifelse(ThemeGoal!='',paste("<strong>Long term goal:</strong>",ThemeGoal),"Blank"))
pander::pandoc.p(ifelse(i=="Transition",'Beginning in 2021, programs in wind down began operating exclusively from a Transition budget. Accordingly, you will not see payments for 2021 or beyond in the thematic tables above. Any grant receiving 2021 or later disbursements from a program in wind down will appear in this Transition table.',paste0("There are <strong>",theme2020grants," active grants</strong> in the ",i," theme, worth a total of <strong>",themeAmount,"</strong>.")))
pander::pandoc.p(ifelse(i=="Transition",paste("In the ",i," theme there are <strong>",theme2020grants," active grants</strong> worth a total of <strong>",themeAmount,".</strong>"),""))
pandoc.table(OutcomeTable, split.table = Inf,justify=c("left","right","center"),style="rmarkdown")
}
dat<-ActivePayments%>%
filter(Program==ThisProgram&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy"&Theme!="RAM"&Statuses_Status.x=="Approved")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
arrange(desc(SortAmount))
for (i in unique(dat[dat$Theme!="Transition",]$Theme)) {
themepayments<-ActivePayments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(OutcomeTheme==i)
themepaymentsNumbers<-ActivePayments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme==i)
theme2020grants<-n_distinct(themepaymentsNumbers$RequestId)
#themeGrants<-nrow(themeTable)
themeAmount<-currency(sum(themepaymentsNumbers$SplitPaymentAmount),digits=0)
OutcomeTable<-themepayments%>%
group_by(Outcomes_Description)%>%
summarise(Amount=sum(SplitPaymentAmount),
Grants=n_distinct(RequestId))%>%
arrange(desc(Amount))%>%
dplyr::rename("Strategic Outcome"=1)
OutcomeTable$Amount<-as.character(currency(OutcomeTable$Amount,digits=0))
ThemeGoal<-ThemeGoals$goal[ThemeGoals$theme==i&ThemeGoals$Abbreviation==ThisProgram]
create_section(i)
}
themepayments<-payments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program==ThisProgram&OutcomeProgram!=ThisProgram)
OutcomeTable<-themepayments%>%
group_by(OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Strategic Outcome"=2)
kableExtra::kable(OutcomeTable, booktabs = T) %>%
kableExtra::kable_styling(latex_options = "striped", position = "left")
TotalPayments<-payments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program=="no"&OutcomeProgram!="no")
OutcomeTable<-themepayments%>%
group_by(OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Strategic Outcome"=2)
View(OutcomeTable)
themepayments<-payments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program=="no"&OutcomeProgram!="no")
OutcomeTable<-themepayments%>%
group_by(OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Strategic Outcome"=2)
View(OutcomeTable)
TotalOutcomes<-themepayments%>%
group_by(OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Strategic Outcome"=2)
for (i in payments$Program) {
themepayments<-payments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program==i&OutcomeProgram!=i)
OutcomeTable<-themepayments%>%
group_by(OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Strategic Outcome"=2)
TotalOutcomes<-bind_rows(OutcomeTable,TotalOutcomes)
}
for (i in unique(payments$Program)) {
themepayments<-payments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program==i&OutcomeProgram!=i)
OutcomeTable<-themepayments%>%
group_by(OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Strategic Outcome"=2)
TotalOutcomes<-bind_rows(OutcomeTable,TotalOutcomes)
}
themepayments<-payments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program=="no"&OutcomeProgram!="no")
TotalOutcomes<-themepayments%>%
group_by(OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Strategic Outcome"=2)
unique(payments$Program)
unique(ActivePayments$Program)
for (i in unique(ActivePayments$Program)) {
themepayments<-ActivePayments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program==i&OutcomeProgram!=i)
OutcomeTable<-themepayments%>%
group_by(OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Strategic Outcome"=2)
TotalOutcomes<-bind_rows(OutcomeTable,TotalOutcomes)
}
View(TotalOutcomes)
themepayments<-payments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program=="no"&OutcomeProgram!="no")
TotalOutcomes<-themepayments%>%
group_by(Program,OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Otcome Program"=2,
"Strategic Outcome"=3)
for (i in unique(ActivePayments$Program)) {
themepayments<-ActivePayments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program==i&OutcomeProgram!=i)
OutcomeTable<-themepayments%>%
group_by(Program,OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Otcome Program"=2,
"Strategic Outcome"=3)
TotalOutcomes<-bind_rows(OutcomeTable,TotalOutcomes)
}
ThisProgram<-"PPED"
ThisProgramName<-"Pro Poor Economic Development"
ProgramPayments<-ActivePayments%>%
filter(Program==ThisProgram)
TotalPayments<-n_distinct(ProgramPayments$PaymentId)
TotalGrants<-n_distinct(ProgramPayments$RequestId)
TotalOrgs<-n_distinct(ProgramPayments$Name)
TotalPaymentAmount<-sum(ProgramPayments$SplitPaymentAmount)
Mission<-ProgramMissions%>%
filter(Abbreviation==ThisProgram)
Geography<-ProgramPayments%>%
group_by(Geography_Description)%>%
summarize(Amount=sum(SplitPaymentAmount))%>%
arrange(desc(Amount))%>%
slice_head(n=8)%>%
dplyr::rename("Geography"=1)
Geography$Amount<-as.character(currency(Geography$Amount,digits=0))
IndCountry<-ProgramPayments%>%
filter(GeneralorCountry=="Individual Country"|GeneralorCountry=="Domestic")
IndPayments<-sum(IndCountry$SplitPaymentAmount)
Generals<-ProgramPayments%>%
filter(GeneralorCountry=="International General"|GeneralorCountry=="Region General")
GeneralPayments<-sum(Generals$SplitPaymentAmount)
ThemeSummary<-ProgramPayments%>%
group_by(Theme)%>%
summarize(`Amount`=sum(SplitPaymentAmount),
Grants=n_distinct(RequestId),
Organizations=n_distinct(Name))%>%
arrange(desc(Amount))
ThemeSummary$Amount<-formattable::currency(ThemeSummary$Amount,digits=0)
kableExtra::kable(ThemeSummary, booktabs = T) %>%
kableExtra::kable_styling(latex_options = "striped", position = "left")
create_section <- function(i) {
# Inserts "## Title (auto)"
pander::pandoc.header(i, level = 4)
# Section contents
# e.g. a random plot
pander::pandoc.p(ifelse(ThemeGoal!='',paste("<strong>Long term goal:</strong>",ThemeGoal),"Blank"))
pander::pandoc.p(ifelse(i=="Transition",'Beginning in 2021, programs in wind down began operating exclusively from a Transition budget. Accordingly, you will not see payments for 2021 or beyond in the thematic tables above. Any grant receiving 2021 or later disbursements from a program in wind down will appear in this Transition table.',paste0("There are <strong>",theme2020grants," active grants</strong> in the ",i," theme, worth a total of <strong>",themeAmount,"</strong>.")))
pander::pandoc.p(ifelse(i=="Transition",paste("In the ",i," theme there are <strong>",theme2020grants," active grants</strong> worth a total of <strong>",themeAmount,".</strong>"),""))
pandoc.table(OutcomeTable, split.table = Inf,justify=c("left","right","center"),style="rmarkdown")
}
dat<-ActivePayments%>%
filter(Program==ThisProgram&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy"&Theme!="RAM"&Statuses_Status.x=="Approved")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
arrange(desc(SortAmount))
for (i in unique(dat[dat$Theme!="Transition",]$Theme)) {
themepayments<-ActivePayments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(OutcomeTheme==i)
themepaymentsNumbers<-ActivePayments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme==i)
theme2020grants<-n_distinct(themepaymentsNumbers$RequestId)
#themeGrants<-nrow(themeTable)
themeAmount<-currency(sum(themepaymentsNumbers$SplitPaymentAmount),digits=0)
OutcomeTable<-themepayments%>%
group_by(Outcomes_Description)%>%
summarise(Amount=sum(SplitPaymentAmount),
Grants=n_distinct(RequestId))%>%
arrange(desc(Amount))%>%
dplyr::rename("Strategic Outcome"=1)
OutcomeTable$Amount<-as.character(currency(OutcomeTable$Amount,digits=0))
ThemeGoal<-ThemeGoals$goal[ThemeGoals$theme==i&ThemeGoals$Abbreviation==ThisProgram]
create_section(i)
}
themepayments<-payments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program==ThisProgram&OutcomeProgram!=ThisProgram)
OutcomeTable<-themepayments%>%
group_by(OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Strategic Outcome"=2)
length(OutcomeTable$Program)
show.text<-ifelse(length(OutcomeTable$Program)!=0,TRUE,FALSE)
setwd("C:/Users/rcarder/Documents/dev/ffcheatsheet")
install.packages("rvest")
install.packages("BAMMtools")
