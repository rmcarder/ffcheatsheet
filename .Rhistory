filter(Program=="no"&OutcomeProgram!="no")
TotalOutcomes<-themepayments%>%
group_by(OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Strategic Outcome"=2)
unique(payments$Program)
unique(ActivePayments$Program)
for (i in unique(ActivePayments$Program)) {
themepayments<-ActivePayments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program==i&OutcomeProgram!=i)
OutcomeTable<-themepayments%>%
group_by(OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Strategic Outcome"=2)
TotalOutcomes<-bind_rows(OutcomeTable,TotalOutcomes)
}
View(TotalOutcomes)
themepayments<-payments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program=="no"&OutcomeProgram!="no")
TotalOutcomes<-themepayments%>%
group_by(Program,OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Otcome Program"=2,
"Strategic Outcome"=3)
for (i in unique(ActivePayments$Program)) {
themepayments<-ActivePayments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program==i&OutcomeProgram!=i)
OutcomeTable<-themepayments%>%
group_by(Program,OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Otcome Program"=2,
"Strategic Outcome"=3)
TotalOutcomes<-bind_rows(OutcomeTable,TotalOutcomes)
}
ThisProgram<-"PPED"
ThisProgramName<-"Pro Poor Economic Development"
ProgramPayments<-ActivePayments%>%
filter(Program==ThisProgram)
TotalPayments<-n_distinct(ProgramPayments$PaymentId)
TotalGrants<-n_distinct(ProgramPayments$RequestId)
TotalOrgs<-n_distinct(ProgramPayments$Name)
TotalPaymentAmount<-sum(ProgramPayments$SplitPaymentAmount)
Mission<-ProgramMissions%>%
filter(Abbreviation==ThisProgram)
Geography<-ProgramPayments%>%
group_by(Geography_Description)%>%
summarize(Amount=sum(SplitPaymentAmount))%>%
arrange(desc(Amount))%>%
slice_head(n=8)%>%
dplyr::rename("Geography"=1)
Geography$Amount<-as.character(currency(Geography$Amount,digits=0))
IndCountry<-ProgramPayments%>%
filter(GeneralorCountry=="Individual Country"|GeneralorCountry=="Domestic")
IndPayments<-sum(IndCountry$SplitPaymentAmount)
Generals<-ProgramPayments%>%
filter(GeneralorCountry=="International General"|GeneralorCountry=="Region General")
GeneralPayments<-sum(Generals$SplitPaymentAmount)
ThemeSummary<-ProgramPayments%>%
group_by(Theme)%>%
summarize(`Amount`=sum(SplitPaymentAmount),
Grants=n_distinct(RequestId),
Organizations=n_distinct(Name))%>%
arrange(desc(Amount))
ThemeSummary$Amount<-formattable::currency(ThemeSummary$Amount,digits=0)
kableExtra::kable(ThemeSummary, booktabs = T) %>%
kableExtra::kable_styling(latex_options = "striped", position = "left")
create_section <- function(i) {
# Inserts "## Title (auto)"
pander::pandoc.header(i, level = 4)
# Section contents
# e.g. a random plot
pander::pandoc.p(ifelse(ThemeGoal!='',paste("<strong>Long term goal:</strong>",ThemeGoal),"Blank"))
pander::pandoc.p(ifelse(i=="Transition",'Beginning in 2021, programs in wind down began operating exclusively from a Transition budget. Accordingly, you will not see payments for 2021 or beyond in the thematic tables above. Any grant receiving 2021 or later disbursements from a program in wind down will appear in this Transition table.',paste0("There are <strong>",theme2020grants," active grants</strong> in the ",i," theme, worth a total of <strong>",themeAmount,"</strong>.")))
pander::pandoc.p(ifelse(i=="Transition",paste("In the ",i," theme there are <strong>",theme2020grants," active grants</strong> worth a total of <strong>",themeAmount,".</strong>"),""))
pandoc.table(OutcomeTable, split.table = Inf,justify=c("left","right","center"),style="rmarkdown")
}
dat<-ActivePayments%>%
filter(Program==ThisProgram&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy"&Theme!="RAM"&Statuses_Status.x=="Approved")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
arrange(desc(SortAmount))
for (i in unique(dat[dat$Theme!="Transition",]$Theme)) {
themepayments<-ActivePayments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(OutcomeTheme==i)
themepaymentsNumbers<-ActivePayments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme==i)
theme2020grants<-n_distinct(themepaymentsNumbers$RequestId)
#themeGrants<-nrow(themeTable)
themeAmount<-currency(sum(themepaymentsNumbers$SplitPaymentAmount),digits=0)
OutcomeTable<-themepayments%>%
group_by(Outcomes_Description)%>%
summarise(Amount=sum(SplitPaymentAmount),
Grants=n_distinct(RequestId))%>%
arrange(desc(Amount))%>%
dplyr::rename("Strategic Outcome"=1)
OutcomeTable$Amount<-as.character(currency(OutcomeTable$Amount,digits=0))
ThemeGoal<-ThemeGoals$goal[ThemeGoals$theme==i&ThemeGoals$Abbreviation==ThisProgram]
create_section(i)
}
themepayments<-payments%>%
filter(Statuses_Status.x=="Approved"&ProjectEndDate>=Sys.Date())%>%
filter(Theme!="Outside of Strategy")%>%
left_join(OutcomeLookupTable,by="Outcomes_Description")%>%
filter(Program==ThisProgram&OutcomeProgram!=ThisProgram)
OutcomeTable<-themepayments%>%
group_by(OutcomeProgram,Outcomes_Description)%>%
filter(Outcomes_Description!="N/A - MIG, Exec, Cross Program, and 2G"&Outcomes_Description!="Outside of Strategy")%>%
summarise(Grants=n_distinct(RequestId))%>%
filter(Grants>1)%>%
arrange(desc(Grants))%>%
dplyr::rename("Program"=1,
"Strategic Outcome"=2)
length(OutcomeTable$Program)
show.text<-ifelse(length(OutcomeTable$Program)!=0,TRUE,FALSE)
setwd("C:/Users/rcarder/Documents/dev/ffcheatsheet")
install.packages("rvest")
install.packages("BAMMtools")
setwd("C:/Users/rcarder/Documents/dev/ffcheatsheet")
library(rvest)
library(BAMMtools)
library(RODBC)           # Provides database connectivity
library(dplyr)           # only used for nice format of Head() function here
library(gridExtra)
library(forcats)
library(grid)
library(RGraphics)
library(ggforce) # for 'geom_arc_bar'
library(reshape)
library(stringr)
library(tidyr)
library(timeDate)
library(lubridate)
library(RJSONIO)
library(maps)
library(mapdata)
library(jsonlite)
library(geosphere)
library(ggmap)
library(ggplot2)
library(tools)
library(mapplots)
library(viridis)
library(ggrepel)
library(formattable)
library(extrafont)
library(alluvial)
library(readr)
qburl <- "https://www.fantasypros.com/nfl/projections/qb.php?week=draft"
rburl <- "https://www.fantasypros.com/nfl/projections/rb.php?week=draft"
wrurl <- "https://www.fantasypros.com/nfl/projections/wr.php?week=draft"
teurl <- "https://www.fantasypros.com/nfl/projections/te.php?week=draft"
xpathpath<-'//*[@id="data"]'
QB <- qburl %>%
html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
QB <- QB[[1]]
names(QB) <- c("Name","passAtt_fp","passcomp_fp","pass_yds","pass_tds","pass_int","rushAtt_fp","rush_yds","rush_tds","FL","pts")
QB<-QB[-c(1,2), ]
QB<-head(QB,n=25)
library(rvest)
library(BAMMtools)
library(RODBC)           # Provides database connectivity
library(dplyr)           # only used for nice format of Head() function here
library(gridExtra)
library(forcats)
library(grid)
library(RGraphics)
library(ggforce) # for 'geom_arc_bar'
library(reshape)
library(stringr)
library(tidyr)
library(timeDate)
library(lubridate)
library(RJSONIO)
library(maps)
library(mapdata)
library(jsonlite)
library(geosphere)
library(ggmap)
library(ggplot2)
library(tools)
library(mapplots)
library(viridis)
library(ggrepel)
library(formattable)
library(extrafont)
library(alluvial)
library(readr)
qburl <- "https://www.fantasypros.com/nfl/projections/qb.php?week=draft"
rburl <- "https://www.fantasypros.com/nfl/projections/rb.php?week=draft"
wrurl <- "https://www.fantasypros.com/nfl/projections/wr.php?week=draft"
teurl <- "https://www.fantasypros.com/nfl/projections/te.php?week=draft"
xpathpath<-'//*[@id="data"]'
QB <- qburl %>%
html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
#install.packages("rvest")
install.packages("BAMMtools")
library(BAMMtools)
QB <- qburl %>%
html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
library(rvest)
library(BAMMtools)
library(RODBC)           # Provides database connectivity
library(dplyr)           # only used for nice format of Head() function here
library(gridExtra)
library(forcats)
library(grid)
library(RGraphics)
library(ggforce) # for 'geom_arc_bar'
library(reshape)
library(stringr)
library(tidyr)
library(timeDate)
library(lubridate)
library(RJSONIO)
library(maps)
library(mapdata)
library(jsonlite)
library(geosphere)
library(ggmap)
library(ggplot2)
library(tools)
library(mapplots)
library(viridis)
library(ggrepel)
library(formattable)
library(extrafont)
library(alluvial)
library(readr)
qburl <- "https://www.fantasypros.com/nfl/projections/qb.php?week=draft"
rburl <- "https://www.fantasypros.com/nfl/projections/rb.php?week=draft"
wrurl <- "https://www.fantasypros.com/nfl/projections/wr.php?week=draft"
teurl <- "https://www.fantasypros.com/nfl/projections/te.php?week=draft"
xpathpath<-'//*[@id="data"]'
QB <- qburl %>%
html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
QB <- QB[[1]]
names(QB) <- c("Name","passAtt_fp","passcomp_fp","pass_yds","pass_tds","pass_int","rushAtt_fp","rush_yds","rush_tds","FL","pts")
QB <- qburl
QB <- qburl %>%
read_html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
QB <- QB[[1]]
names(QB) <- c("Name","passAtt_fp","passcomp_fp","pass_yds","pass_tds","pass_int","rushAtt_fp","rush_yds","rush_tds","FL","pts")
QB<-QB[-c(1,2), ]
QB<-head(QB,n=25)
QB$POS<-'QB'
QB$POSRANK<-seq.int(nrow(QB))
View(QB)
library(rvest)
library(BAMMtools)
library(RODBC)           # Provides database connectivity
library(dplyr)           # only used for nice format of Head() function here
library(gridExtra)
library(forcats)
library(grid)
library(RGraphics)
library(ggforce) # for 'geom_arc_bar'
library(reshape)
library(stringr)
library(tidyr)
library(timeDate)
library(lubridate)
library(RJSONIO)
library(maps)
library(mapdata)
library(jsonlite)
library(geosphere)
library(ggmap)
library(ggplot2)
library(tools)
library(mapplots)
library(viridis)
library(ggrepel)
library(formattable)
library(extrafont)
library(alluvial)
library(readr)
##Scrape from FantasyPros
qburl <- "https://www.fantasypros.com/nfl/projections/qb.php?week=draft"
rburl <- "https://www.fantasypros.com/nfl/projections/rb.php?week=draft"
wrurl <- "https://www.fantasypros.com/nfl/projections/wr.php?week=draft"
teurl <- "https://www.fantasypros.com/nfl/projections/te.php?week=draft"
xpathpath<-'//*[@id="data"]'
QB <- qburl %>%
read_html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
QB <- QB[[1]]
names(QB) <- c("Name","passAtt_fp","passcomp_fp","pass_yds","pass_tds","pass_int","rushAtt_fp","rush_yds","rush_tds","FL","pts")
QB<-QB[-c(1,2), ]
QB<-head(QB,n=25)
QB$POS<-'QB'
QB$POSRANK<-seq.int(nrow(QB))
RB <- rburl %>%
read_html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
RB <- RB[[1]]
names(RB) <- c("Name","rushAtt_fp","rush_yds","rush_tds","rec","rec_yds","rec_tds","FL","pts")
RB<-RB[-c(1,2), ]
RB<-head(RB,n=60)
RB$POS<-'RB'
RB$POSRANK<-seq.int(nrow(RB))
WR <- wrurl %>%
read_html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
WR <- WR[[1]]
names(WR) <- c("Name","rec","rec_yds","rec_tds","rushAtt_fp","rush_yds","rush_tds","FL","pts")
WR<-WR[-c(1,2), ]
WR<-head(WR,n=70)
WR$POS<-'WR'
WR$POSRANK<-seq.int(nrow(WR))
TE <- teurl %>%
read_html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
TE <- TE[[1]]
names(TE) <- c("Name","rec","rec_yds","rec_tds","FL","pts")
TE<-TE[-c(1,2), ]
TE<-head(TE,n=25)
TE$POS<-'TE'
TE$POSRANK<-seq.int(nrow(TE))
FFPROS<-bind_rows(QB,RB,WR,TE)
FFPROS<-FFPROS %>%
separate(Name, sep = -3, into = c("Name", "Team")) %>%
mutate_all(funs(str_trim(.)))
TE <- TE[[1]]
names(TE) <- c("Name","rec","rec_yds","rec_tds","FL","pts")
TE<-TE[-c(1,2), ]
QB <- qburl %>%
read_html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
QB <- QB[[1]]
qburl <- "https://www.fantasypros.com/nfl/projections/qb.php?week=draft"
rburl <- "https://www.fantasypros.com/nfl/projections/rb.php?week=draft"
wrurl <- "https://www.fantasypros.com/nfl/projections/wr.php?week=draft"
teurl <- "https://www.fantasypros.com/nfl/projections/te.php?week=draft"
xpathpath<-'//*[@id="data"]'
QB <- qburl %>%
read_html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
QB <- QB[[1]]
names(QB) <- c("Name","passAtt_fp","passcomp_fp","pass_yds","pass_tds","pass_int","rushAtt_fp","rush_yds","rush_tds","FL","pts")
QB<-QB[-c(1,2), ]
QB<-head(QB,n=25)
QB$POS<-'QB'
QB$POSRANK<-seq.int(nrow(QB))
RB <- rburl %>%
read_html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
RB <- RB[[1]]
names(RB) <- c("Name","rushAtt_fp","rush_yds","rush_tds","rec","rec_yds","rec_tds","FL","pts")
RB<-RB[-c(1,2), ]
RB<-head(RB,n=60)
RB$POS<-'RB'
RB$POSRANK<-seq.int(nrow(RB))
WR <- wrurl %>%
read_html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
WR <- WR[[1]]
names(WR) <- c("Name","rec","rec_yds","rec_tds","rushAtt_fp","rush_yds","rush_tds","FL","pts")
WR<-WR[-c(1,2), ]
WR<-head(WR,n=70)
WR$POS<-'WR'
WR$POSRANK<-seq.int(nrow(WR))
TE <- teurl %>%
read_html() %>%
html_nodes(xpath=xpathpath) %>%
html_table()
TE <- TE[[1]]
names(TE) <- c("Name","rec","rec_yds","rec_tds","FL","pts")
TE<-TE[-c(1,2), ]
TE<-head(TE,n=25)
TE$POS<-'TE'
TE$POSRANK<-seq.int(nrow(TE))
FFPROS<-bind_rows(QB,RB,WR,TE)
FFPROS<-FFPROS %>%
separate(Name, sep = -3, into = c("Name", "Team")) %>%
mutate_all(funs(str_trim(.)))
##Bind
Alldata<-FFPROS
Alldata <- left_join(FFPROS,ESPN, by=c("Name","Name"))
##Bind
Alldata<-FFPROS
##Remove columns and set to numeric
Alldata[,3:12]<-sapply(Alldata[,3:12],function(x) as.numeric(gsub(",", "", x)))
Alldata[,14:17]<-sapply(Alldata[,14:17],function(x) as.numeric(gsub(",", "", x)))
Alldata[,21:31]<-sapply(Alldata[,21:31],function(x) as.numeric(gsub(",", "", x)))
Alldata[is.na(Alldata)] <- 0
##Bind
Alldata<-FFPROS
View(Alldata)
Alldata[is.na(Alldata)] <- 0
##Bind
Alldata<-FFPROS
##Remove columns and set to numeric
Alldata[,3:12]<-sapply(Alldata[,3:12],function(x) as.numeric(gsub(",", "", x)))
##Bind
Alldata<-FFPROS
##Remove columns and set to numeric
Alldata[,3:12]<-sapply(Alldata[,3:12],function(x) as.numeric(gsub(",", "", x)))
Alldata[,14:17]<-sapply(Alldata[,14:17],function(x) as.numeric(gsub(",", "", x)))
Alldata[,21:31]<-sapply(Alldata[,21:31],function(x) as.numeric(gsub(",", "", x)))
Alldata[is.na(Alldata)] <- 0
Alldata$EXPPTS <- (Alldata$pass_yds)/25+
(Alldata$pass_tds*4)+
(Alldata$rush_yds/10)+
(Alldata$rush_tds*6)+
(Alldata$rec/2)+
(Alldata$rec_yds)/10+
(Alldata$rec_tds)*6-
((Alldata$FL)*2+(Alldata$pass_int*2))
Alldata$ESPNPTS <- (Alldata$pass_yds)/25+
(Alldata$pass_tds*4)+
(Alldata$rush_yds/10)+
(Alldata$rush_tds*6)+
(Alldata$rec/4)+
(Alldata$rec_yds)/10+
(Alldata$rec_tds)*6-
((Alldata$FL)*2+(Alldata$pass_int*2))
Alldata$ESPN <- (Alldata$ESPN_pass_yds)/25+
(Alldata$ESPN_pass_tds*4)+
(Alldata$ESPN_rush_yds/10)+
(Alldata$ESPN_rush_tds*6)+
(Alldata$ESPN_rec/4)+
(Alldata$ESPN_rec_yds)/10+
(Alldata$ESPN_rec_tds)*6-
((Alldata$FL)*2+(Alldata$ESPN_pass_int*2))
AlldataQB<-Alldata[Alldata$POS=="QB",]
QBRep<-AlldataQB$EXPPTS[15]
AlldataQB$VoRP<-AlldataQB$EXPPTS-QBRep
AlldataRB<-Alldata[Alldata$POS=="RB",]
RBRep<-AlldataRB$EXPPTS[40]
AlldataRB$VoRP<-AlldataRB$EXPPTS-RBRep
AlldataWR<-Alldata[Alldata$POS=="WR",]
WRRep<-AlldataWR$EXPPTS[50]
AlldataWR$VoRP<-AlldataWR$EXPPTS-WRRep
AlldataTE<-Alldata[Alldata$POS=="TE",]
TERep<-AlldataTE$EXPPTS[15]
AlldataTE$VoRP<-AlldataTE$EXPPTS-TERep
AllData<-rbind(AlldataQB,AlldataRB,AlldataWR,AlldataTE)
breaks<-getJenksBreaks(AllData$VoRP,11)
AllData$Jenks<-cut(AllData$VoRP, breaks = breaks, labels=as.character(1:10))
AllData$ESPNOverUnder<-AllData$EXPPTS/AllData$ESPN
AllData[,18:24]<-sapply(AllData[,18:24],function(x) as.numeric(gsub(",", "", x)))
AllData$Auction[AllData$Jenks==10]<-80
AllData$Auction[AllData$Jenks==9]<-60
AllData$Auction[AllData$Jenks==8]<-50
AllData$Auction[AllData$Jenks==7]<-35
AllData$Auction[AllData$Jenks==6]<-23
AllData$Auction[AllData$Jenks==5]<-15
AllData$Auction[AllData$Jenks==4]<-10
AllData$Auction[AllData$Jenks==3]<-7
AllData$Auction[AllData$Jenks==2]<-5
AllData$Auction[AllData$Jenks==1]<-3
AllData$Tier[AllData$Jenks==10]<-1
AllData$Tier[AllData$Jenks==9]<-2
AllData$Tier[AllData$Jenks==8]<-3
AllData$Tier[AllData$Jenks==7]<-4
AllData$Tier[AllData$Jenks==6]<-5
AllData$Tier[AllData$Jenks==5]<-6
AllData$Tier[AllData$Jenks==4]<-7
AllData$Tier[AllData$Jenks==3]<-8
AllData$Tier[AllData$Jenks==2]<-9
AllData$Tier[AllData$Jenks==1]<-10
path<-"C:/Users/rcarder/Documents/dev/ffcheatsheet/datatest.json"
AllData %>%
toJSON() %>%
write_lines(path)
write.csv(AllData,"AllData.csv")
